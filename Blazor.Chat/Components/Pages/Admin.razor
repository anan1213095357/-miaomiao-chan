@page "/admin"
@using Blazor.Chat.Components.Layout
@using Blazor.Chat.Components.Widget
@using Blazor.Chat.Models
@using FreeSql
@using FreeSql.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.ComponentModel
@using System.Threading.Tasks
@layout EmptyLayout
@rendermode InteractiveServer
@inject IFreeSql freeSql

<PageTitle>管理后台</PageTitle>

<style>
    :root {
        --primary-color: #6366f1;
        --secondary-color: #818cf8;
        --background-color: #f3f4f6;
        --card-background: #ffffff;
        --text-primary: #1f2937;
        --text-secondary: #4b5563;
        --border-color: #e5e7eb;
    }

    body {
        background-color: var(--background-color);
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }

    .admin-container {
        max-width: 1440px;
        margin: 0 auto;
        padding: 2rem;
    }

    .page-header {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: var(--card-background);
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .page-title {
        color: var(--text-primary);
        font-size: 1.875rem;
        font-weight: 600;
        margin: 0;
    }

    .card {
        background: var(--card-background);
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1.5rem;
    }

    .card-header {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-container {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .table-container {
        overflow-x: auto;
    }

    .custom-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

    .custom-table th {
        background-color: #f9fafb;
        color: var(--text-secondary);
        font-weight: 500;
        text-align: left;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid var(--border-color);
    }

    .custom-table td {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid var(--border-color);
        color: var(--text-secondary);
    }

    .custom-table tr:hover {
        background-color: #f9fafb;
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-weight: 500;
        transition: all 0.2s;
    }

    .btn-primary {
        background-color: var(--primary-color);
        color: white;
        border: none;
    }

    .btn-primary:hover {
        background-color: var(--secondary-color);
    }

    .btn-danger {
        background-color: #ef4444;
        color: white;
        border: none;
    }

    .btn-danger:hover {
        background-color: #dc2626;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: var(--card-background);
        border-radius: 0.5rem;
        width: 100%;
        max-width: 500px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-primary);
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 0.375rem;
        transition: border-color 0.2s;
    }

    .form-control:focus {
        border-color: var(--primary-color);
        outline: none;
    }

    .tabs {
        display: flex;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 1.5rem;
    }

    .tab {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        border-bottom: 2px solid transparent;
    }

    .tab.active {
        border-bottom-color: var(--primary-color);
        color: var(--primary-color);
    }
</style>

<div class="admin-container">
    <!-- 页面标题 -->
    <div class="page-header">
        <h1 class="page-title">管理控制台</h1>
    </div>

    <!-- 用户管理卡片 -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">用户管理</h2>
            <div class="search-container">
                <div class="search-box">
                    <input type="text" 
                           @bind="searchTerm" 
                           class="form-control" 
                           placeholder="搜索用户..." />
                </div>
                <button class="btn btn-primary" @onclick="LoadPersons">搜索</button>
                <button class="btn btn-primary" @onclick="ShowAddForm">添加用户</button>
            </div>
        </div>

        <div class="table-container">
            <table class="custom-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>用户名</th>
                        <th>余额</th>
                        <th>邮箱</th>
                        <th>角色</th>
                        <th>账户</th>
                        <th>手机号码</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody>
                    @if (persons != null && persons.Count > 0)
                    {
                        @foreach (var person in persons)
                        {
                            <tr>
                                <td>@person.ID</td>
                                <td>@person.Name</td>
                                <td>@person.Balance</td>
                                <td>@person.Email</td>
                                <td>@person.Roles</td>
                                <td>@person.Account</td>
                                <td>@person.Phone</td>
                                <td>
                                    <button class="btn btn-primary" @onclick="() => ShowEditForm(person)">编辑</button>
                                    <button class="btn btn-danger" @onclick="() => DeletePerson(person.ID)">删除</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center">暂无数据</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- 脚本审核卡片 -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">脚本审核</h2>
            <div class="search-container">
                <select class="form-control" @bind="_selectScriptAuditStatus">
                    <option value="@ScriptAuditStatus.未通过">未通过</option>
                    <option value="@ScriptAuditStatus.待审核">待审核</option>
                    <option value="@ScriptAuditStatus.已通过">已通过</option>
                    <option value="@ScriptAuditStatus.带商讨">待商讨</option>
                </select>
                <button class="btn btn-primary" @onclick='async ()=> {
                    _scripts = await freeSql.Select<Scripts>()
                        .Where(p=>p.ScriptAuditStatus == _selectScriptAuditStatus)
                        .ToListAsync();
                }'>查询</button>
            </div>
        </div>

        <div class="table-container">
            <table class="custom-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>用户</th>
                        <th>脚本路径</th>
                        <th>审核状态</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody>
                    @if (_scripts != null && _scripts.Count > 0)
                    {
                        @foreach (var script in _scripts)
                        {
                            <tr>
                                <td>@script.ID</td>
                                <td>@script.PersonID</td>
                                <td>@script.CodeFilePath</td>
                                <td>@script.ScriptAuditStatus</td>
                                <td>
                                    <div class="btn-group">
                                        <button class="btn btn-primary" @onclick="async () => await UpdateScriptStatus(script.ID, ScriptAuditStatus.已通过)">通过</button>
                                        <button class="btn btn-danger" @onclick="async () => await UpdateScriptStatus(script.ID, ScriptAuditStatus.未通过)">拒绝</button>
                                        <button class="btn btn-primary" @onclick="async () => await UpdateScriptStatus(script.ID, ScriptAuditStatus.带商讨)">待商讨</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center">暂无数据</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- 编辑人员弹出框 -->
    @if (showEditForm)
    {
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">编辑人员</h5>
                        <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="editPerson" OnValidSubmit="HandleEditSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">名称</label>
                                <InputText @bind-Value="editPerson.Name" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">余额</label>
                                <input value="@editPerson.Balance.ToString()" @onchange="(ChangeEventArgs e)=> {
if (decimal.TryParse(e.Value?.ToString(),out var value))
{
    editPerson.Balance = value;
}
}" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">邮箱</label>
                                <InputText @bind-Value="editPerson.Email" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">角色</label>
                                <CuteMultiSelect @bind-Value="@editPerson.Roles" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">账户</label>
                                <InputText @bind-Value="editPerson.Account" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">密码</label>
                                <InputText @bind-Value="editPerson.Password" type="password" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">手机号码</label>
                                <InputText @bind-Value="editPerson.Phone" class="form-control" />
                            </div>
                            <button type="submit" class="btn btn-success me-2">保存</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">取消</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- 添加新人员弹出框 -->
    @if (showAddForm)
    {
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">添加新人员</h5>
                        <button type="button" class="btn-close" @onclick="CancelAdd"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="newPerson" OnValidSubmit="HandleAddSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">名称</label>
                                <InputText @bind-Value="newPerson.Name" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">余额</label>
                                <input value="@newPerson.Balance.ToString()" @onchange="(ChangeEventArgs e)=> {
if (decimal.TryParse(e.Value?.ToString(),out var value))
{
    editPerson.Balance = value;
}
}" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">邮箱</label>
                                <InputText @bind-Value="newPerson.Email" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">角色</label>
                                <CuteMultiSelect @bind-Value="@newPerson.Roles" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">账户</label>
                                <InputText @bind-Value="newPerson.Account" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">密码</label>
                                <InputText @bind-Value="newPerson.Password" type="password" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">手机号码</label>
                                <InputText @bind-Value="newPerson.Phone" class="form-control" />
                            </div>
                            <button type="submit" class="btn btn-success me-2">保存</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelAdd">取消</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Person> persons = new();
    private string searchTerm = string.Empty;
    private bool isLoading = false;
    private Person editPerson = new();
    private Person newPerson = new();
    private ScriptAuditStatus _selectScriptAuditStatus;
    private List<Scripts> _scripts = [];
    private bool showEditForm = false;
    private bool showAddForm = false;

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadPersons();
    }

    private async Task LoadPersons()
    {
        isLoading = true;
        try
        {
            persons = string.IsNullOrWhiteSpace(searchTerm)
                ? await freeSql.Select<Person>().ToListAsync()
                : await freeSql.Select<Person>()
                    .Where(p => p.Name.Contains(searchTerm) ||
                                (!string.IsNullOrEmpty(p.Email) && p.Email.Contains(searchTerm)) ||
                                p.Account.Contains(searchTerm))
                    .ToListAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowEditForm(Person person)
    {
        editPerson = new Person
            {
                ID = person.ID,
                Name = person.Name,
                Balance = person.Balance,
                Email = person.Email,
                Roles = person.Roles,
                Account = person.Account,
                Password = person.Password,
                Phone = person.Phone
            };
        showEditForm = true;
    }

    private void ShowAddForm()
    {
        newPerson = new Person();
        showAddForm = true;
    }

    private async Task HandleEditSubmit()
    {
        try
        {
            var affectedRows = await freeSql.Update<Person>()
                .SetSource(editPerson)
                .ExecuteAffrowsAsync();

            if (affectedRows > 0)
            {
                showEditForm = false;
                await LoadPersons();
                await JSRuntime.InvokeVoidAsync("alert", "更新成功！");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "更新失败！");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"更新出错：{ex.Message}");
        }
    }

    private async Task HandleAddSubmit()
    {
        try
        {
            var affectedRows = await freeSql.Insert(newPerson).ExecuteAffrowsAsync();
            if (affectedRows > 0)
            {
                showAddForm = false;
                await LoadPersons();
                await JSRuntime.InvokeVoidAsync("alert", "添加成功！");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "添加失败！");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"添加出错：{ex.Message}");
        }
    }

    private void CancelEdit()
    {
        showEditForm = false;
    }

    private void CancelAdd()
    {
        showAddForm = false;
    }

    private async Task DeletePerson(long id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"确定要删除 ID 为 {id} 的用户吗？");
        if (confirmed)
        {
            try
            {
                var affectedRows = await freeSql.Delete<Person>().Where(p => p.ID == id).ExecuteAffrowsAsync();
                if (affectedRows > 0)
                {
                    await LoadPersons();
                    await JSRuntime.InvokeVoidAsync("alert", "删除成功！");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "删除失败！");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"删除出错：{ex.Message}");
            }
        }
    }

    private async Task UpdateScriptStatus(long scriptId, ScriptAuditStatus status)
    {
        try
        {
            var affectedRows = await freeSql.Update<Scripts>()
                .Set(p => p.ScriptAuditStatus, status)
                .Where(p => p.ID == scriptId)
                .ExecuteAffrowsAsync();

            if (affectedRows > 0)
            {
                _scripts = await freeSql.Select<Scripts>()
                    .Where(p => p.ScriptAuditStatus == _selectScriptAuditStatus)
                    .ToListAsync();
                await JSRuntime.InvokeVoidAsync("alert", "状态更新成功！");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "状态更新失败！");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"更新出错：{ex.Message}");
        }
    }
}