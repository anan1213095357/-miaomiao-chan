@* ToggleSwitch.razor *@
<div class="toggle-container m-2" @onclick="OnToggle">
    <div class="toggle @(_isOn ? "toggle-on" : "toggle-off")">
        <div class="toggle-handle"></div>
    </div>
    @if (!string.IsNullOrEmpty(Label))
    {
        <span class="toggle-label">@Label</span>
    }
</div>

<style>
    .toggle-container {
        display: inline-flex;
        align-items: center;
        cursor: pointer;
        user-select: none;
    }

    .toggle {
        position: relative;
        width: 50px;
        height: 26px;
        background-color: #ccc;
        border-radius: 13px;
        transition: background-color 0.3s;
    }

    .toggle-on {
        background-color: #ff9eb5;
    }

    .toggle-handle {
        position: absolute;
        top: 3px;
        left: 3px;
        width: 20px;
        height: 20px;
        background-color: white;
        border-radius: 50%;
        transition: transform 0.3s;
    }

    .toggle-on .toggle-handle {
        transform: translateX(24px);
    }

    .toggle-label {
        margin-left: 8px;
    }
</style>

@code {
    private bool _isOn;

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public string? Label { get; set; }

    protected override void OnParametersSet()
    {
        _isOn = Value;
    }

    private async Task OnToggle()
    {
        _isOn = !_isOn;
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(_isOn);
        }
    }
}